<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>使用 Tesseract.js 识别和分段文本</title>
    <style>
        #preview {
            display: none;
            margin-top: 20px;
            max-width: 300px;
        }
        .paragraph {
            margin: 10px 0;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
            font-weight: bold;
        }
    </style>
</head>
<body>
<h1>🤠 塔罗考试 - 给我过 🤠</h1>

<h3>图片识别</h3>
<input type="file" id="fileInput" accept="image/*" capture="camera">
<button id="processButton">识别文本</button>
<br>
<h3>答案输入</h3>
<input id="question">
<button id="answer">获取答案</button>
<div id="outputText"></div>
<img id="preview" alt="预览图" />

<canvas id="canvas" style="display:none;"></canvas>
<script>
    const dataToHtml = (data) => {
        if (data.length === 0) {
            return "<h3>没有找到匹配的答案 😭</h3>";
        }

        let innerHtml = "<h3>匹配到啦~~~ 🥳</h3>";

        return innerHtml + data.map((result, index) => `
            <h4>问题 ${index + 1}：</h4>
            <div class="paragraph">${result.question}</div>
            <h4>答案：</h4>
            ${result.answers.map(answer => `<div class="paragraph">${answer}</div>`).join("")} `
        ).join("");
    }

    document.getElementById('answer').addEventListener('click', async () => {
        let question = document.getElementById('question').value;
        const outputText = document.getElementById('outputText');
        try {
            const response = await fetch(`<%= serverUrl %>/answers?question=${question}`, {
                method: 'GET',
            });

            if (!response.ok) {
                throw new Error('网络错误: ' + response.statusText);
            }

            outputText.innerHTML = dataToHtml(await response.json());
        } catch (e) {
            outputText.innerHTML = `error: ${e}`
        }
        fetch();
    });

    document.getElementById('fileInput').addEventListener('change', (event) => {
        const file = event.target.files[0];

        if (file) {
            document.getElementById('outputText').innerHTML = "";
            const reader = new FileReader();

            reader.onload = function(e) {
                const preview = document.getElementById('preview');
                preview.src = e.target.result;
                preview.style.display = 'block';
            };

            reader.readAsDataURL(file);
        }
    });

    document.getElementById('processButton').addEventListener('click', async () => {
        const fileInput = document.getElementById('fileInput');
        const outputText = document.getElementById('outputText');

        if (fileInput.files.length === 0) {
            outputText.textContent = "请先选择一张图片.";
            return;
        }

        outputText.innerHTML = "识别中，请稍候...";

        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const file = fileInput.files[0];
        const img = new Image();
        img.src = URL.createObjectURL(file);
        img.onload = async () => {
            canvas.width = img.width;
            canvas.height = img.height;

            ctx.drawImage(img, 0, 0);

            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;

            for (let i = 0; i < data.length; i += 4) {
                const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
                data[i] = avg;
                data[i + 1] = avg;
                data[i + 2] = avg;
            }

            ctx.putImageData(imageData, 0, 0);

            canvas.toBlob(async (blob) => {
                const formData = new FormData();
                formData.append('image', blob, 'image.png');

                try {
                    const response = await fetch('<%= serverUrl %>/analyse', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error('网络错误: ' + response.statusText);
                    }

                    outputText.innerHTML = dataToHtml(await response.json());
                } catch (error) {
                    outputText.textContent = "识别失败: " + error.message;
                }
            }, 'image/png');
        };
    });
</script>
</body>
</html>
